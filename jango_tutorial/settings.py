"""
Django settings for jango_tutorial project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-@k^*bsf76g^!xi#!9+u)l@%o7s&x$=ww#2_85=lhg!$6xg$*c8"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",         # DRF自带的token认证
    "tutorial01.apps.Tutorial01Config",
    "course.apps.CourseConfig"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "jango_tutorial.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "jango_tutorial.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "jango_tutorial",
        "USER": "root",
        "PASSWORD": "Saberzhang8.",
        "HOST": "127.0.0.1",
        "PORT": 3306
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# 代表某一个app中的静态文件夹，是可以访问的
STATIC_URL = "static/"

# 项目目录下的静态文件夹也可以访问
STATIC_ROOT = BASE_DIR / "static"

# 项目目录下的staticfiles文件夹可以访问
STATICFILES_DIRS = [
    BASE_DIR / "staticfiles"
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# rest framework的全局配置, 在一个字典中
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'URL_FIELD_NAME': 'url',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50,        # 配置每个分页中数量的多少
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',       # 配置返回 时间格式
    'DEFAULT_RENDER_CLASSES': [
        'rest_framework.renders.JSONRenderer',
        'rest_framework.renders.BrowsableAPIRenderer'
    ],
    'DEFAULT_PERMISSION_CLASSES': [         # 配置权限控制
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_PARSER_CLASSES': [             # 配置解析器，用来解析request.data中的数据
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [     # 配置验证器，但是只有TokenAuthentication需要在INSTALL APPS中配置，而且还不是在中间件中配置, 好奇怪
        # 三种认证方式: 分别是  账户密码认证、session认证、token认证
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'

        # 区分一下认证和权限的区别
        # 认证指的是 对登陆的用户身份进行校验，确认身份。
        # 权限指的是 对认证通过的用户，它能通过访问哪些接口，或者是对于同一接口能拿到什么级别的数据
        # 然后说一下，在DRF中，认证的执行级别是最高的，在权限确认之前。
        # 认证除了DRF提供的这3种，还可以使用第三方提供的认证方式，比如JWT等。。。
        # 但是要进阶课才能看了，也不知道哪门进阶课。。。
    ]
}
# 对于DRF的认证和权限，需要理解的是 核心依赖的是两个数据
# 分别是 request.user 和 request.auth 这两个数据
# 认证机制依赖的是 django中的auth框架
# from django.contrib import auth

# DRF认证   会从 DEFAULT_AUTHENTICATION_CLASSES 中按照设置的顺序进行验证，并且通过了一个验证，那么后续的验证就不再进行了
# BasicAuthentication: 对username和password进行联合base64编码，然后放在request头中，Authentication: 编码  一般只用在测试环境，生产环境不用
# BasicAuthentication 在验证通过后 会将 request.user 设置为 django.contrib.auth.models.User实例，而request.auth 会设置为空
# 在认证失败后会在响应头加上 www-authentication-base realms api这个键值对 (虽然不知道为什么，但还是记下来了)

# SessionAuthentication 一般是在前端使用ajax请求时使用的，这种认证方式一般会在请求中带有csrf的验证。
# 如果验证失败了会返回403 forbidden，不会在响应中带东西

